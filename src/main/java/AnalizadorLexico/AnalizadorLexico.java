// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexico.flex

package AnalizadorLexico;

// Secci√≥n de imports
import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\2\22\0\1\1\6\0"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\6\21\1\0\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\4\0\1\60"+
    "\1\0\32\61\1\0\1\62\10\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\26\20\1\21\1\0\1\22\1\0\1\23\1\0"+
    "\1\24\1\25\3\20\1\26\3\20\1\27\13\20\1\30"+
    "\10\20\1\31\1\32\15\20\1\0\1\33\1\34\1\20"+
    "\1\35\1\36\1\37\24\20\1\40\1\20\1\41\1\42"+
    "\1\43\6\20\1\44\1\45\11\20\1\21\1\0\11\20"+
    "\1\46\2\20\1\47\1\50\3\20\1\51\3\20\1\52"+
    "\1\53\1\20\1\54\6\20\1\55\1\56\1\57\5\20"+
    "\1\0\1\60\5\20\1\61\5\20\1\62\1\20\1\63"+
    "\2\20\1\64\1\65\4\20\1\66\4\20\1\67\1\0"+
    "\1\70\2\20\1\71\1\20\1\72\2\20\1\73\1\74"+
    "\1\20\1\75\3\20\1\76\1\77\1\100\1\101\1\102"+
    "\1\20\1\0\1\103\1\104\2\20\1\105\1\106\1\107"+
    "\1\110\1\20\1\111\1\0\1\20\1\112\1\20\1\0"+
    "\2\20\1\0\1\113\1\114\1\0\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\63\0\63\0\63\0\63"+
    "\0\63\0\231\0\63\0\63\0\314\0\63\0\377\0\63"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u05fa\0\u062d\0\u0660\0\u0693\0\63\0\63\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u02ca\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u02ca\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u02ca\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0693\0\u02ca\0\u0ef1\0\u02ca\0\u02ca"+
    "\0\u02ca\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u02ca\0\u1320\0\u02ca"+
    "\0\u02ca\0\u02ca\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u02ca\0\u02ca\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u02ca\0\u1881"+
    "\0\u18b4\0\u02ca\0\u02ca\0\u18e7\0\u191a\0\u194d\0\u02ca\0\u1980"+
    "\0\u19b3\0\u19e6\0\u02ca\0\u02ca\0\u1a19\0\u02ca\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u02ca\0\u02ca\0\u02ca\0\u1b7e"+
    "\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u02ca\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u02ca\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u02ca\0\u1eae\0\u02ca\0\u1ee1\0\u1f14\0\u02ca\0\u02ca"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u02ca\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u02ca\0\u20df\0\u02ca\0\u2112\0\u2145\0\u02ca\0\u2178"+
    "\0\u02ca\0\u21ab\0\u21de\0\u02ca\0\u02ca\0\u2211\0\u02ca\0\u2244"+
    "\0\u2277\0\u22aa\0\u02ca\0\u02ca\0\u02ca\0\u02ca\0\u02ca\0\u22dd"+
    "\0\u2310\0\u02ca\0\u02ca\0\u2343\0\u2376\0\u02ca\0\u02ca\0\u02ca"+
    "\0\u02ca\0\u23a9\0\u02ca\0\u23dc\0\u240f\0\u02ca\0\u2442\0\u2475"+
    "\0\u24a8\0\u24db\0\u250e\0\u02ca\0\u02ca\0\u2541\0\u05fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\5\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\31\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\4\31\1\50\1\2\63\0\2\51\2\0\1\52\11\51"+
    "\2\53\43\51\12\0\1\54\63\0\1\55\1\0\5\15"+
    "\65\0\1\56\62\0\1\57\53\0\5\31\4\0\3\31"+
    "\1\60\7\31\1\61\1\31\1\62\4\31\1\63\2\31"+
    "\1\64\6\31\16\0\5\31\4\0\10\31\1\65\5\31"+
    "\1\66\11\31\1\67\3\31\16\0\5\31\4\0\1\70"+
    "\15\31\1\71\2\31\1\72\12\31\16\0\5\31\4\0"+
    "\1\73\3\31\1\74\14\31\1\75\12\31\16\0\5\31"+
    "\4\0\27\31\1\76\4\31\16\0\5\31\4\0\1\77"+
    "\15\31\1\100\2\31\1\101\12\31\16\0\5\31\4\0"+
    "\21\31\1\102\12\31\16\0\5\31\4\0\34\31\16\0"+
    "\5\31\4\0\5\31\1\103\7\31\1\104\16\31\16\0"+
    "\5\31\4\0\16\31\1\105\15\31\16\0\5\31\4\0"+
    "\4\31\1\106\27\31\16\0\5\31\4\0\10\31\1\107"+
    "\23\31\16\0\5\31\4\0\1\110\7\31\1\111\23\31"+
    "\16\0\5\31\4\0\16\31\1\112\5\31\1\113\7\31"+
    "\16\0\5\31\4\0\15\31\1\114\3\31\1\115\12\31"+
    "\16\0\5\31\4\0\21\31\1\116\12\31\16\0\5\31"+
    "\4\0\4\31\1\117\27\31\16\0\5\31\4\0\4\31"+
    "\1\120\17\31\1\121\7\31\16\0\5\31\4\0\1\122"+
    "\3\31\1\123\14\31\1\124\6\31\1\125\3\31\16\0"+
    "\5\31\4\0\15\31\1\126\1\31\1\127\14\31\16\0"+
    "\5\31\4\0\1\130\33\31\16\0\5\31\4\0\7\31"+
    "\1\131\24\31\16\0\5\31\4\0\32\31\1\132\1\50"+
    "\1\0\2\51\2\0\1\52\60\51\2\0\1\52\10\51"+
    "\5\133\41\51\2\54\1\0\2\54\2\0\53\54\16\0"+
    "\5\134\56\0\5\31\4\0\3\31\1\135\30\31\16\0"+
    "\5\31\4\0\23\31\1\136\10\31\16\0\5\31\4\0"+
    "\3\31\1\137\30\31\16\0\5\31\4\0\2\31\1\140"+
    "\31\31\16\0\5\31\4\0\6\31\1\141\25\31\16\0"+
    "\5\31\4\0\6\31\1\142\25\31\16\0\5\31\4\0"+
    "\16\31\1\143\15\31\16\0\5\31\4\0\22\31\1\144"+
    "\11\31\16\0\5\31\4\0\13\31\1\145\1\31\1\146"+
    "\6\31\1\147\7\31\16\0\5\31\4\0\4\31\1\150"+
    "\27\31\16\0\5\31\4\0\23\31\1\151\10\31\16\0"+
    "\5\31\4\0\2\31\1\152\10\31\1\153\6\31\1\154"+
    "\11\31\16\0\5\31\4\0\16\31\1\155\15\31\16\0"+
    "\5\31\4\0\10\31\1\156\23\31\16\0\5\31\4\0"+
    "\13\31\1\157\20\31\16\0\5\31\4\0\21\31\1\160"+
    "\12\31\16\0\5\31\4\0\16\31\1\161\15\31\16\0"+
    "\5\31\4\0\16\31\1\162\15\31\16\0\5\31\4\0"+
    "\22\31\1\163\1\164\10\31\16\0\5\31\4\0\10\31"+
    "\1\165\23\31\16\0\5\31\4\0\30\31\1\166\3\31"+
    "\16\0\5\31\4\0\14\31\1\167\17\31\16\0\5\31"+
    "\4\0\27\31\1\170\4\31\16\0\5\31\4\0\15\31"+
    "\1\171\16\31\16\0\5\31\4\0\23\31\1\172\10\31"+
    "\16\0\5\31\4\0\13\31\1\173\20\31\16\0\5\31"+
    "\4\0\3\31\1\174\30\31\16\0\5\31\4\0\10\31"+
    "\1\175\23\31\16\0\5\31\4\0\5\31\1\176\26\31"+
    "\16\0\5\31\4\0\13\31\1\177\5\31\1\200\1\31"+
    "\1\201\10\31\16\0\5\31\4\0\14\31\1\202\17\31"+
    "\16\0\5\31\4\0\1\31\1\203\32\31\16\0\5\31"+
    "\4\0\27\31\1\204\4\31\16\0\5\31\4\0\24\31"+
    "\1\205\7\31\16\0\5\31\4\0\17\31\1\206\14\31"+
    "\16\0\5\31\4\0\10\31\1\207\23\31\16\0\5\31"+
    "\4\0\3\31\1\210\30\31\16\0\5\31\4\0\13\31"+
    "\1\211\5\31\1\212\12\31\16\0\5\31\4\0\4\31"+
    "\1\213\27\31\16\0\5\214\4\0\33\31\1\214\1\0"+
    "\2\51\2\0\1\52\10\51\5\215\41\51\15\0\5\31"+
    "\4\0\4\31\1\216\27\31\16\0\5\31\4\0\10\31"+
    "\1\217\23\31\16\0\5\31\4\0\13\31\1\220\20\31"+
    "\16\0\5\31\4\0\2\31\1\221\31\31\16\0\5\31"+
    "\4\0\24\31\1\222\7\31\16\0\5\31\4\0\22\31"+
    "\1\223\11\31\16\0\5\31\4\0\15\31\1\224\16\31"+
    "\16\0\5\31\4\0\1\225\33\31\16\0\5\31\4\0"+
    "\1\226\3\31\1\227\27\31\16\0\5\31\4\0\10\31"+
    "\1\230\23\31\16\0\5\31\4\0\4\31\1\231\27\31"+
    "\16\0\5\31\4\0\2\31\1\232\31\31\16\0\5\31"+
    "\4\0\17\31\1\233\14\31\16\0\5\31\4\0\22\31"+
    "\1\234\11\31\16\0\5\31\4\0\22\31\1\235\11\31"+
    "\16\0\5\31\4\0\4\31\1\236\27\31\16\0\5\31"+
    "\4\0\14\31\1\237\17\31\16\0\5\31\4\0\24\31"+
    "\1\240\7\31\16\0\5\31\4\0\4\31\1\241\27\31"+
    "\16\0\5\31\4\0\4\31\1\242\11\31\1\243\15\31"+
    "\16\0\5\31\4\0\15\31\1\244\16\31\16\0\5\31"+
    "\4\0\10\31\1\245\23\31\16\0\5\31\4\0\13\31"+
    "\1\246\20\31\16\0\5\31\4\0\4\31\1\247\27\31"+
    "\16\0\5\31\4\0\14\31\1\250\17\31\16\0\5\31"+
    "\4\0\4\31\1\251\27\31\16\0\5\31\4\0\4\31"+
    "\1\252\27\31\16\0\5\31\4\0\10\31\1\253\23\31"+
    "\16\0\5\31\4\0\13\31\1\254\20\31\16\0\5\31"+
    "\4\0\23\31\1\255\10\31\16\0\5\31\4\0\4\31"+
    "\1\256\27\31\16\0\5\31\4\0\4\31\1\257\27\31"+
    "\16\0\5\31\4\0\20\31\1\260\13\31\16\0\5\31"+
    "\4\0\1\261\33\31\16\0\5\31\4\0\24\31\1\262"+
    "\7\31\16\0\5\31\4\0\2\31\1\263\31\31\16\0"+
    "\5\31\4\0\21\31\1\264\12\31\16\0\5\214\4\0"+
    "\32\31\1\132\1\214\1\0\2\51\2\0\1\52\10\51"+
    "\5\265\41\51\15\0\5\31\4\0\21\31\1\266\12\31"+
    "\16\0\5\31\4\0\15\31\1\267\16\31\16\0\5\31"+
    "\4\0\4\31\1\270\27\31\16\0\5\31\4\0\1\271"+
    "\33\31\16\0\5\31\4\0\14\31\1\272\17\31\16\0"+
    "\5\31\4\0\23\31\1\273\10\31\16\0\5\31\4\0"+
    "\23\31\1\274\10\31\16\0\5\31\4\0\23\31\1\275"+
    "\10\31\16\0\5\31\4\0\1\31\1\276\32\31\16\0"+
    "\5\31\4\0\14\31\1\277\17\31\16\0\5\31\4\0"+
    "\23\31\1\300\10\31\16\0\5\31\4\0\23\31\1\301"+
    "\10\31\16\0\5\31\4\0\4\31\1\302\27\31\16\0"+
    "\5\31\4\0\10\31\1\303\23\31\16\0\5\31\4\0"+
    "\17\31\1\304\14\31\16\0\5\31\4\0\21\31\1\305"+
    "\12\31\16\0\5\31\4\0\6\31\1\306\25\31\16\0"+
    "\5\31\4\0\23\31\1\307\10\31\16\0\5\31\4\0"+
    "\21\31\1\310\12\31\16\0\5\31\4\0\1\311\33\31"+
    "\16\0\5\31\4\0\21\31\1\312\12\31\16\0\5\31"+
    "\4\0\2\31\1\313\31\31\16\0\5\31\4\0\1\314"+
    "\33\31\16\0\5\31\4\0\4\31\1\315\27\31\16\0"+
    "\5\31\4\0\24\31\1\316\7\31\16\0\5\31\4\0"+
    "\23\31\1\317\10\31\16\0\5\31\4\0\4\31\1\320"+
    "\27\31\16\0\5\31\4\0\7\31\1\321\24\31\16\0"+
    "\5\31\4\0\4\31\1\322\27\31\1\0\2\51\2\0"+
    "\1\52\5\51\1\323\50\51\15\0\5\31\4\0\23\31"+
    "\1\324\10\31\16\0\5\31\4\0\1\325\33\31\16\0"+
    "\5\31\4\0\3\31\1\326\30\31\16\0\5\31\4\0"+
    "\15\31\1\327\16\31\16\0\5\31\4\0\21\31\1\330"+
    "\12\31\16\0\5\31\4\0\4\31\1\331\27\31\16\0"+
    "\5\31\4\0\1\332\33\31\16\0\5\31\4\0\1\333"+
    "\33\31\16\0\5\31\4\0\4\31\1\334\27\31\16\0"+
    "\5\31\4\0\22\31\1\335\11\31\16\0\5\31\4\0"+
    "\6\31\1\336\25\31\16\0\5\31\4\0\23\31\1\337"+
    "\10\31\16\0\5\31\4\0\4\31\1\340\27\31\16\0"+
    "\5\31\4\0\21\31\1\341\12\31\16\0\5\31\4\0"+
    "\4\31\1\342\27\31\16\0\5\31\4\0\23\31\1\343"+
    "\10\31\16\0\5\31\4\0\13\31\1\344\20\31\16\0"+
    "\5\31\4\0\4\31\1\345\27\31\16\0\5\31\4\0"+
    "\4\31\1\346\27\31\16\0\5\31\4\0\22\31\1\347"+
    "\11\31\16\0\5\31\4\0\1\350\33\31\1\0\2\51"+
    "\2\0\1\52\10\51\2\351\44\51\15\0\5\31\4\0"+
    "\15\31\1\352\16\31\16\0\5\31\4\0\4\31\1\353"+
    "\27\31\16\0\5\31\4\0\1\354\33\31\16\0\5\31"+
    "\4\0\22\31\1\355\11\31\16\0\5\31\4\0\13\31"+
    "\1\356\20\31\16\0\5\31\4\0\15\31\1\357\16\31"+
    "\16\0\5\31\4\0\21\31\1\360\12\31\16\0\5\31"+
    "\4\0\30\31\1\361\3\31\16\0\5\31\4\0\15\31"+
    "\1\362\16\31\16\0\5\31\4\0\21\31\1\363\12\31"+
    "\1\0\2\51\2\0\1\52\10\51\5\364\41\51\15\0"+
    "\5\31\4\0\10\31\1\365\23\31\16\0\5\31\4\0"+
    "\4\31\1\366\27\31\16\0\5\31\4\0\2\31\1\367"+
    "\31\31\1\0\2\51\2\0\1\52\5\51\1\370\50\51"+
    "\15\0\5\31\4\0\15\31\1\371\16\31\16\0\5\31"+
    "\4\0\4\31\1\372\27\31\1\0\2\51\2\0\1\52"+
    "\10\51\4\373\42\51\15\0\5\31\4\0\23\31\1\374"+
    "\10\31\16\0\5\31\4\0\22\31\1\375\11\31\1\0"+
    "\2\51\2\0\1\52\10\51\5\376\43\51\2\0\1\377"+
    "\56\51";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9588];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\5\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\30\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\11\53\1\1\0\61\1\1\0\47\1\1\0\35\1"+
    "\1\0\25\1\1\0\12\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private List<Token> tokens = new ArrayList<>();  // Lista general de tokens
    private List<TokenError> tokenError = new ArrayList<>();  // Lista para errores

    public List<Token> getTokens() {
        return tokens;
    }

    public List<TokenError> getTokenError() {
        return tokenError;
    }

    private Token createToken(String lexema, String tipo, int line, int column, int posicion, int tama) {
        return new Token(lexema, tipo, line+1, column+1, posicion, tama);
    }

    private TokenError createErrorToken(String lexema, int line, int column, int posicion, int tama) {
        return new TokenError(lexema, "ERROR", line+1, column+1, posicion, tama);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 78: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 79: break;
          case 3:
            { tokens.add(createToken(yytext(), Token.PARENTESIS_APERTURA, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 80: break;
          case 4:
            { tokens.add(createToken(yytext(), Token.PARENTESIS_CIERRE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 81: break;
          case 5:
            { tokens.add(createToken(yytext(), Token.MULTI, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 82: break;
          case 6:
            { tokens.add(createToken(yytext(), Token.SUMA, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 83: break;
          case 7:
            { tokens.add(createToken(yytext(), Token.COMA, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 84: break;
          case 8:
            { tokens.add(createToken(yytext(), Token.RESTA, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 85: break;
          case 9:
            { tokens.add(createToken(yytext(), Token.PUNTO, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 86: break;
          case 10:
            { tokens.add(createToken(yytext(), Token.DIVISION, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 87: break;
          case 11:
            { tokens.add(createToken(yytext(), Token.ENTERO, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 88: break;
          case 12:
            { tokens.add(createToken(yytext(), Token.PUNTO_COMA, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 89: break;
          case 13:
            { tokens.add(createToken(yytext(), Token.MENOR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 90: break;
          case 14:
            { tokens.add(createToken(yytext(), Token.IGUAL, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 91: break;
          case 15:
            { tokens.add(createToken(yytext(), Token.MAYOR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 92: break;
          case 16:
            { tokenError.add(createErrorToken(yytext(), yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 93: break;
          case 17:
            { tokens.add(createToken(yytext(), Token.IDENTIFICADOR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 94: break;
          case 18:
            { tokens.add(createToken(yytext(), Token.STRING_LITERAL, yyline, yycolumn, (int) yychar, yytext().length())); 
    System.out.println("Cadena v√°lida: " + yytext());
            }
          // fall through
          case 95: break;
          case 19:
            { tokens.add(createToken(yytext(), Token.COMMENT_LINE, yyline, yycolumn, (int) yychar, yytext().length())); 
    System.out.println("Comentario: " + yytext());
            }
          // fall through
          case 96: break;
          case 20:
            { tokens.add(createToken(yytext(), Token.IGUALMENOR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 97: break;
          case 21:
            { tokens.add(createToken(yytext(), Token.IGUALMAYOR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 98: break;
          case 22:
            { tokens.add(createToken(yytext(), Token.AS, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 99: break;
          case 23:
            { tokens.add(createToken(yytext(), Token.BY, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 100: break;
          case 24:
            { tokens.add(createToken(yytext(), Token.IF, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 101: break;
          case 25:
            { tokens.add(createToken(yytext(), Token.ON, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 102: break;
          case 26:
            { tokens.add(createToken(yytext(), Token.OR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 103: break;
          case 27:
            { tokens.add(createToken(yytext(), Token.DECIMAL_LITERAL, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 104: break;
          case 28:
            { tokens.add(createToken(yytext(), Token.ADD, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 105: break;
          case 29:
            { tokens.add(createToken(yytext(), Token.AND, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 106: break;
          case 30:
            { tokens.add(createToken(yytext(), Token.ASC, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 107: break;
          case 31:
            { tokens.add(createToken(yytext(), Token.AVG, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 108: break;
          case 32:
            { tokens.add(createToken(yytext(), Token.KEY, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 109: break;
          case 33:
            { tokens.add(createToken(yytext(), Token.MAX, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 110: break;
          case 34:
            { tokens.add(createToken(yytext(), Token.MIN, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 111: break;
          case 35:
            { tokens.add(createToken(yytext(), Token.NOT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 112: break;
          case 36:
            { tokens.add(createToken(yytext(), Token.SET, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 113: break;
          case 37:
            { tokens.add(createToken(yytext(), Token.SUM, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 114: break;
          case 38:
            { tokens.add(createToken(yytext(), Token.DATE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 115: break;
          case 39:
            { tokens.add(createToken(yytext(), Token.DESC, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 116: break;
          case 40:
            { tokens.add(createToken(yytext(), Token.DROP, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 117: break;
          case 41:
            { tokens.add(createToken(yytext(), Token.FROM, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 118: break;
          case 42:
            { tokens.add(createToken(yytext(), Token.INTO, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 119: break;
          case 43:
            { tokens.add(createToken(yytext(), Token.JOIN, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 120: break;
          case 44:
            { tokens.add(createToken(yytext(), Token.NULL, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 121: break;
          case 45:
            { tokens.add(createToken(yytext(), Token.TEXT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 122: break;
          case 46:
            { tokens.add(createToken(yytext(), Token.TRUE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 123: break;
          case 47:
            { tokens.add(createToken(yytext(), Token.TYPE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 124: break;
          case 48:
            { tokens.add(createToken(yytext(), Token.ALTER, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 125: break;
          case 49:
            { tokens.add(createToken(yytext(), Token.COUNT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 126: break;
          case 50:
            { tokens.add(createToken(yytext(), Token.FALSE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 127: break;
          case 51:
            { tokens.add(createToken(yytext(), Token.GROUP, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 128: break;
          case 52:
            { tokens.add(createToken(yytext(), Token.LIMIT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 129: break;
          case 53:
            { tokens.add(createToken(yytext(), Token.ORDER, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 130: break;
          case 54:
            { tokens.add(createToken(yytext(), Token.TABLE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 131: break;
          case 55:
            { tokens.add(createToken(yytext(), Token.WHERE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 132: break;
          case 56:
            { tokens.add(createToken(yytext(), Token.BIGINT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 133: break;
          case 57:
            { tokens.add(createToken(yytext(), Token.COLUMN, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 134: break;
          case 58:
            { tokens.add(createToken(yytext(), Token.CREATE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 135: break;
          case 59:
            { tokens.add(createToken(yytext(), Token.DELETE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 136: break;
          case 60:
            { tokens.add(createToken(yytext(), Token.EXISTS, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 137: break;
          case 61:
            { tokens.add(createToken(yytext(), Token.INSERT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 138: break;
          case 62:
            { tokens.add(createToken(yytext(), Token.SELECT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 139: break;
          case 63:
            { tokens.add(createToken(yytext(), Token.SERIAL, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 140: break;
          case 64:
            { tokens.add(createToken(yytext(), Token.UNIQUE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 141: break;
          case 65:
            { tokens.add(createToken(yytext(), Token.UPDATE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 142: break;
          case 66:
            { tokens.add(createToken(yytext(), Token.VALUES, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 143: break;
          case 67:
            { tokens.add(createToken(yytext(), Token.BOOLEAN, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 144: break;
          case 68:
            { tokens.add(createToken(yytext(), Token.CASCADE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 145: break;
          case 69:
            { tokens.add(createToken(yytext(), Token.DECIMAL, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 146: break;
          case 70:
            { tokens.add(createToken(yytext(), Token.FOREIGN, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 147: break;
          case 71:
            { tokens.add(createToken(yytext(), Token.INTEGER, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 148: break;
          case 72:
            { tokens.add(createToken(yytext(), Token.PRIMARY, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 149: break;
          case 73:
            { tokens.add(createToken(yytext(), Token.VARCHAR, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 150: break;
          case 74:
            { tokens.add(createToken(yytext(), Token.DATABASE, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 151: break;
          case 75:
            { tokens.add(createToken(yytext(), Token.CONSTRAINT, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 152: break;
          case 76:
            { tokens.add(createToken(yytext(), Token.REFERENCES, yyline, yycolumn, (int) yychar, yytext().length()));
            }
          // fall through
          case 153: break;
          case 77:
            { tokens.add(createToken(yytext(), Token.DATE_FORMAT, yyline, yycolumn, (int) yychar, yytext().length())); 
    System.out.println("Fecha v√°lida: " + yytext());
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
